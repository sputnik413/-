#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct HuffmanNode
{
    struct HuffmanNode * LLink;
    struct HuffmanNode * RLink;
    char info;
    int weight;
};

typedef struct HuffmanNode * HuffmanTree;
struct HuffmanNode times[27];
int sequence[27]= {0};
int Sq=1;
HuffmanTree createBranch()
{
    int count=Sq-2;
    while(count)
    {
        count--;
        struct HuffmanNode node;
        struct HuffmanNode first,second;
        int i=0;
        int min=1,min0=-1;
        for(i=0; i<26; i++)
        {
            if(times[i].weight!=0)
                min = min>times[i].weight?times[i].weight:min;
        }
        for(i=0; i<26; i++)
        {
            if(times[i].weight==min)
            {
                if(min0<0)
                {
                    min0 = sequence[i];
                }
                else
                {
                    min0 = min0>sequence[i]?sequence[i]:min0;
                }
            }
        }
        for(i=0; i<26; i++)
        {
            if(times[i].weight==min&&sequence[i]==min0)
            {
                first = times[i];
                times[i].weight = 0;
                break;
            }
        }
        printf("\n%d ",first.weight);
        min=1,min0=-1;
        for(i=0; i<26; i++)
        {
            if(times[i].weight!=0)
                min = min>times[i].weight?times[i].weight:min;
        }
        for(i=0; i<26; i++)
        {
            if(times[i].weight==min)
            {
                if(min0<0)
                {
                    min0 = sequence[i];
                }
                else
                {
                    min0 = min0>sequence[i]?sequence[i]:min0;
                }
            }
        }
        for(i=0; i<26; i++)
        {
            if(times[i].weight==min&&sequence[i]==min0)
            {
                second = times[i];
                times[i].weight = 0;
                break;
            }
        }
        printf("%d\n",second.weight);
        node.LLink = &first;
        node.RLink = &second;
        node.weight = first.weight+second.weight;
        node.info = '#';
        times[i] = node;
        sequence[i] = Sq++;
    }
    for(int i=0;i<26;i++)
    {
        if(times[i].weight!=0)
            return &times[i];
    }
}
int main()
{
    char str[5050];
    scanf("%s",str);
    int len=strlen(str);
    int i;
    for(i=0; i<27; i++)
    {
        times[i].weight = 0;
    }
    for(i=0; i<len; i++)
    {
        if(str[i]>='a'&&str[i]<='z')
        {
            int a = str[i]-97;
            if(sequence[a]==0)
            {
                times[a].weight++;
                sequence[a]=Sq;
                Sq++;
            }
            else
            {
                times[a].weight++;
            }
        }
    }
    HuffmanTree root = createBranch();
    for(i=0; i<26; i++)
    {
        printf("%d ",times[i].weight);
    }
    printf("\n");
    for(i=0; i<26; i++)
    {
        printf("%d ",sequence[i]);
    }
    printf("\n%d %d",root->weight,Sq);
    return 0;
}
